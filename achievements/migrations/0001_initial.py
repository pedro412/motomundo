# Generated by Django 5.2.5 on 2025-08-13 20:24

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clubs', '0010_multi_club_membership_support'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Unique identifier for this achievement (e.g., 'president_badge')", max_length=50, unique=True)),
                ('name', models.CharField(help_text='Display name for the achievement', max_length=100)),
                ('description', models.TextField(help_text='Description of what this achievement represents')),
                ('category', models.CharField(choices=[('leadership', 'Leadership'), ('membership', 'Membership'), ('activity', 'Activity'), ('special', 'Special'), ('milestone', 'Milestone')], help_text='Type of achievement', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('legendary', 'Legendary')], default='easy', help_text='How difficult this achievement is to earn', max_length=20)),
                ('icon', models.CharField(blank=True, help_text='Icon class or emoji for this achievement', max_length=100)),
                ('color', models.CharField(default='#FFD700', help_text='Hex color for the badge (default: gold)', max_length=7)),
                ('points', models.IntegerField(default=10, help_text='Points awarded for earning this achievement', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this achievement can be earned')),
                ('is_repeatable', models.BooleanField(default=False, help_text='Can be earned multiple times')),
                ('requires_verification', models.BooleanField(default=False, help_text='Requires manual admin verification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'ordering': ['category', 'difficulty', 'points'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(blank=True, default=dict, help_text='Additional context and progress information')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When this achievement was verified', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this achievement')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='achievements.achievement')),
                ('source_club', models.ForeignKey(blank=True, help_text='Club context where achievement was earned', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clubs.club')),
                ('source_member', models.ForeignKey(blank=True, help_text='Member record that triggered this achievement', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clubs.member')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_achievements', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='Admin who verified this achievement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='AchievementProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_value', models.IntegerField(default=0, help_text='Current progress value')),
                ('target_value', models.IntegerField(help_text='Target value to complete achievement')),
                ('progress_data', models.JSONField(blank=True, default=dict, help_text='Detailed progress information')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_tracking', to='achievements.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Achievement Progress',
                'verbose_name_plural': 'Achievement Progress',
                'ordering': ['-updated_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
