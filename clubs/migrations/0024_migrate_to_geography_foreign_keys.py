# Generated by Django 5.2.5 on 2025-08-22 18:45

from django.db import migrations


def update_foreign_key_references(apps, schema_editor):
    """Update foreign key references to point to geography app models"""
    # Get models from both apps
    GeographyCountry = apps.get_model('geography', 'Country')
    GeographyState = apps.get_model('geography', 'State')
    Club = apps.get_model('clubs', 'Club')
    Chapter = apps.get_model('clubs', 'Chapter')
    ChapterJoinRequest = apps.get_model('clubs', 'ChapterJoinRequest')
    
    # Get Mexico from geography app
    mexico = GeographyCountry.objects.get(code='MX')
    
    # Update clubs that don't have geography references
    clubs_updated = 0
    for club in Club.objects.filter(country_new__isnull=True):
        club.country_new = mexico
        club.save()
        clubs_updated += 1
    
    # Update club primary states
    for club in Club.objects.filter(primary_state_new__isnull=True):
        if club.primary_state:  # If old text field has data
            geo_state = GeographyState.objects.filter(
                country=mexico,
                name__icontains=club.primary_state.strip()
            ).first()
            if geo_state:
                club.primary_state_new = geo_state
                club.save()
    
    # Update chapters
    chapters_updated = 0
    for chapter in Chapter.objects.filter(state_new__isnull=True):
        if chapter.state:  # If old text field has data
            geo_state = GeographyState.objects.filter(
                country=mexico,
                name__icontains=chapter.state.strip()
            ).first()
            if geo_state:
                chapter.state_new = geo_state
                chapter.save()
                chapters_updated += 1
    
    # Update join requests
    requests_updated = 0
    for join_request in ChapterJoinRequest.objects.filter(state_new__isnull=True):
        if join_request.state:  # If old text field has data
            geo_state = GeographyState.objects.filter(
                country=mexico,
                name__icontains=join_request.state.strip()
            ).first()
            if geo_state:
                join_request.state_new = geo_state
                join_request.save()
                requests_updated += 1
    
    print(f"Updated foreign key references:")
    print(f"  - Clubs: {clubs_updated}")
    print(f"  - Chapters: {chapters_updated}")
    print(f"  - Join requests: {requests_updated}")


def reverse_foreign_key_update(apps, schema_editor):
    """Reverse the foreign key updates"""
    Club = apps.get_model('clubs', 'Club')
    Chapter = apps.get_model('clubs', 'Chapter')
    ChapterJoinRequest = apps.get_model('clubs', 'ChapterJoinRequest')
    
    # Clear geography foreign keys
    Club.objects.update(country_new=None, primary_state_new=None)
    Chapter.objects.update(state_new=None)
    ChapterJoinRequest.objects.update(state_new=None)


class Migration(migrations.Migration):

    dependencies = [
        ('clubs', '0023_add_chapter_location'),
        ('geography', '0002_transfer_data_from_clubs'),  # Ensure geography data exists
    ]

    operations = [
        migrations.RunPython(
            update_foreign_key_references,
            reverse_foreign_key_update
        ),
    ]
