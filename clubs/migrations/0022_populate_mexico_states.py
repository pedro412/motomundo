# Generated by Django 5.2.5 on 2025-08-22 18:43

from django.db import migrations


def populate_mexico_states(apps, schema_editor):
    """Populate Country and State models with Mexico and its 32 states"""
    Country = apps.get_model('clubs', 'Country')
    State = apps.get_model('clubs', 'State')
    
    # Create Mexico country
    mexico, created = Country.objects.get_or_create(
        code='MX',
        defaults={'name': 'Mexico'}
    )
    
    # Mexico's 32 states (31 states + 1 federal district)
    mexico_states = [
        'Aguascalientes',
        'Baja California',
        'Baja California Sur',
        'Campeche',
        'Chiapas',
        'Chihuahua',
        'Ciudad de México',
        'Coahuila',
        'Colima',
        'Durango',
        'Estado de México',
        'Guanajuato',
        'Guerrero',
        'Hidalgo',
        'Jalisco',
        'Michoacán',
        'Morelos',
        'Nayarit',
        'Nuevo León',
        'Oaxaca',
        'Puebla',
        'Querétaro',
        'Quintana Roo',
        'San Luis Potosí',
        'Sinaloa',
        'Sonora',
        'Tabasco',
        'Tamaulipas',
        'Tlaxcala',
        'Veracruz',
        'Yucatán',
        'Zacatecas'
    ]
    
    # Create all states
    for state_name in mexico_states:
        State.objects.get_or_create(
            country=mexico,
            name=state_name
        )
    
    print(f"Created/updated Mexico with {len(mexico_states)} states")


def migrate_existing_data(apps, schema_editor):
    """Migrate existing club and chapter data to use new models"""
    Country = apps.get_model('clubs', 'Country')
    State = apps.get_model('clubs', 'State')
    Club = apps.get_model('clubs', 'Club')
    Chapter = apps.get_model('clubs', 'Chapter')
    ChapterJoinRequest = apps.get_model('clubs', 'ChapterJoinRequest')
    
    mexico = Country.objects.get(code='MX')
    
    # Update all clubs to use Mexico as country
    Club.objects.filter(country_new__isnull=True).update(country_new=mexico)
    
    # Try to match existing state strings to State objects
    for chapter in Chapter.objects.all():
        if chapter.state and not chapter.state_new:
            # Try to find matching state (case insensitive partial match)
            state_obj = State.objects.filter(
                country=mexico,
                name__icontains=chapter.state.strip()
            ).first()
            
            # If no exact match, try more flexible matching
            if not state_obj:
                # Try without accents/special chars and common variations
                normalized_state = chapter.state.lower().strip()
                if 'mexico' in normalized_state or 'df' in normalized_state:
                    state_obj = State.objects.filter(name__icontains='Ciudad de México').first()
                elif 'nuevo leon' in normalized_state:
                    state_obj = State.objects.filter(name__icontains='Nuevo León').first()
                # Add more mappings as needed
                
            if state_obj:
                chapter.state_new = state_obj
                chapter.save()
    
    # Update join requests similarly
    for join_request in ChapterJoinRequest.objects.all():
        if join_request.state and not join_request.state_new:
            state_obj = State.objects.filter(
                country=mexico,
                name__icontains=join_request.state.strip()
            ).first()
            if state_obj:
                join_request.state_new = state_obj
                join_request.save()
    
    # Try to match club primary states
    for club in Club.objects.all():
        if club.primary_state and not club.primary_state_new:
            state_obj = State.objects.filter(
                country=mexico,
                name__icontains=club.primary_state.strip()
            ).first()
            if state_obj:
                club.primary_state_new = state_obj
                club.save()
    
    print("Migrated existing data to use new Country/State models")


def reverse_populate(apps, schema_editor):
    """Reverse migration - clean up data"""
    Country = apps.get_model('clubs', 'Country')
    State = apps.get_model('clubs', 'State')
    
    # Delete all states and countries
    State.objects.all().delete()
    Country.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('clubs', '0021_add_country_state_models'),
    ]

    operations = [
        migrations.RunPython(
            populate_mexico_states,
            reverse_populate
        ),
        migrations.RunPython(
            migrate_existing_data,
            migrations.RunPython.noop
        ),
    ]
