# Generated by Django 5.2.5 on 2025-08-11
from django.db import migrations, models


def forwards(apps, schema_editor):
    Member = apps.get_model('clubs', 'Member')
    # If the old 'name' field exists, split it into first/last name best-effort
    if hasattr(Member, 'name'):
        for m in Member.objects.all():
            parts = (m.name or '').strip().split(' ', 1)
            first = parts[0] if parts and parts[0] else ''
            last = parts[1] if len(parts) > 1 else ''
            setattr(m, 'first_name', first)
            setattr(m, 'last_name', last)
            m.save(update_fields=['first_name', 'last_name'])


def backwards(apps, schema_editor):
    Member = apps.get_model('clubs', 'Member')
    # Join first/last name back into 'name'
    if hasattr(Member, 'first_name') and hasattr(Member, 'last_name'):
        for m in Member.objects.all():
            full_name = (f"{m.first_name} {m.last_name}").strip()
            setattr(m, 'name', full_name)
            m.save(update_fields=['name'])


class Migration(migrations.Migration):

    dependencies = [
        ('clubs', '0004_merge_20250811_1838'),
    ]

    operations = [
        # Add new fields before data migration to allow population
        migrations.AddField(
            model_name='member',
            name='first_name',
            field=models.CharField(default='', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='member',
            name='last_name',
            field=models.CharField(blank=True, default='', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='member',
            name='nickname',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='member',
            name='date_of_birth',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.RunPython(forwards, backwards),
        # Adjust unique constraint and ordering
        migrations.AlterUniqueTogether(
            name='member',
            unique_together={('chapter', 'first_name', 'last_name')},
        ),
    ]
